#include <GL/glew.h>
//#include <vector>
template <typename T> concept _Vector2_t = requires(T a) {
	a.x;
	a.y;
};
template <typename T> concept _Vector3_t = requires(T a) {
	a.x;
	a.y;
	a.z;
};
template <typename T> concept _Vector4_t = requires(T a) {
	a.x;
	a.y;
	a.z;
	a.w;
};
struct {
    //template <typename T> using list = std::vector<T>;
	using f32 = const float&;
	using uint = unsigned int;
    using byte = unsigned char;
	using fn = void;
    using ptr = void*;
	//inline fn Color(f32 rgb) { glColor3f(rgb, rgb, rgb); };
    //inline fn Color(f32 r, f32 g, f32 b, f32 a = 1.f) { glColor4f(r, g, b, a); };
    inline fn Color(byte rgb) { glColor3ub(rgb, rgb, rgb); };
    inline fn Color(byte r, byte g, byte b, byte a = 255) { glColor4ub(r, g, b, a); };
	template <_Vector3_t T> inline fn Color(const T& vec, f32 a) { glColor4ub(vec.x, vec.y, vec.z, a); };
	template <_Vector4_t T> inline fn Color(const T& vec) { glColor4ub(vec.x, vec.y, vec.z, vec.w); };
	inline fn Translate(f32 xyz) { glTranslatef(xyz, xyz, xyz); };
	inline fn Translate(f32 x, f32 y, f32 z) { glTranslatef(x, y, z); };
	template <_Vector2_t T> inline fn Translate(const T& vec, f32 z) { glTranslatef(vec.x, vec.y, z); };
	template <_Vector3_t T> inline fn Translate(const T& vec) { glTranslatef(vec.x, vec.y, vec.z); };
	inline fn Rotate(f32 v) { glRotatef(v, 0, 0, 1); };
	inline fn Rotate(f32 x, f32 y, f32 z) { glRotatef(x, 1, 0, 0); glRotatef(y, 0, 1, 0); glRotatef(z, 0, 0, 1); };
	inline fn Rotate(f32 w, f32 x, f32 y, f32 z) { glRotatef(w, x, y, z); };
	template <_Vector3_t T> inline fn Rotate(const T& v) { glRotatef(v.x, 1, 0, 0); glRotatef(v.y, 0, 1, 0); glRotatef(v.z, 0, 0, 1); };
	inline fn Scale(f32 xyz) { glScalef(xyz, xyz, xyz); };
	inline fn Scale(f32 x, f32 y, f32 z) { glScalef(x, y, z); };
	template <_Vector3_t T> inline fn Scale(const T& vec) { glScalef(vec.x, vec.y, vec.z); };
    struct {
        inline fn operator()(f32 xyz) { glVertex3f(xyz, xyz, xyz); };
        inline fn operator()(f32 x, f32 y) { glVertex2f(x, y); };
        inline fn operator()(f32 x, f32 y, f32 z) { glVertex3f(x, y, z); };
        template <_Vector3_t T> inline fn operator()(const T& vec) { glVertex3f(vec.x, vec.y, vec.z); };
        inline fn Line(f32 x1, f32 y1, f32 z1, f32 x2, f32 y2, f32 z2) { glVertex3f(x1, y1, z1); glVertex3f(x2, y2, z2); };
        inline fn Line(f32 x1, f32 y1, f32 x2, f32 y2) { glVertex2f(x1, y1); glVertex2f(x2, y2); };
        template <_Vector3_t T> inline fn Line(const T& p1, const T& p2);
        inline fn Rect(f32 x, f32 y, f32 scale_x, f32 scale_y) {
            glVertex2f(x - scale_x, y - scale_y);
            glVertex2f(x + scale_x, y - scale_y);
            glVertex2f(x + scale_x, y + scale_y);
            glVertex2f(x - scale_x, y + scale_y);
        };
    } Vertex;
    inline fn LineWidth(f32 width) { glLineWidth(width); };
    inline fn PointSize(f32 size) { glPointSize(size); };
    inline fn TexCoord(f32 xy) { glTexCoord2f(xy, xy); };
    inline fn TexCoord(f32 x, f32 y) { glTexCoord2f(x, y); };
    template <_Vector2_t T> inline fn TexCoord(const T& vec) { glTexCoord2f(vec.x, vec.y); };
    inline fn Viewport(f32 x1, f32 y1, f32 x2, f32 y2) { glViewport(x1, y1, x2, y2); };
    template <_Vector2_t T1, _Vector2_t T2> inline fn Viewport(const T1& xy, const T2& xy2) { glViewport(xy.x, xy.y, xy2.x, xy.y); };
    enum class Poly : byte {
        Point = GL_POINTS,
        Line = GL_LINES,
        LineLoop = GL_LINE_LOOP,
        LineStrip = GL_LINE_STRIP,
        Triangle = GL_TRIANGLES,
        TriangleStrip = GL_TRIANGLE_STRIP,
        TriangleFan = GL_TRIANGLE_FAN,
        Quad = GL_QUADS,
        Polygon = GL_POLYGON
    };
    using enum Poly;
    inline fn Begin(Poly poly) { glBegin((GLenum)poly); };
    inline fn End() { glEnd(); };
    enum class TextureMode : uint {
        Texture1D = GL_TEXTURE_1D,
        Texture2D = GL_TEXTURE_2D,
        Texture3D = GL_TEXTURE_3D,
    };
    using enum TextureMode;
    inline fn Bind(uint id, TextureMode target = Texture2D) { glBindTexture((GLenum)target, id); };
    enum class DataType : uint {
        Float = GL_FLOAT,
        Double = GL_DOUBLE,
        Boolean = GL_BOOL,
        Int = GL_INT,
        Uint = GL_UNSIGNED_INT,
        Byte = GL_UNSIGNED_BYTE,
        Char = GL_BYTE
    };
    using enum DataType;
    enum class Enum : uint {
            Zero = 0,
            False = 0,
            LogicOp = 0x0bf1,
            None = 0,
            TextureComponents = 0x1003,
            NoError = 0,
            Points = 0x0000,
            CurrentBit = 0x00000001,
            True = 1,
            One = 1,
            ClientPixelStoreBit = 0x00000001,
            Lines = 0x0001,
            LineLoop = 0x0002,
            PointBit = 0x00000002,
            ClientVertexArrayBit = 0x00000002,
            LineStrip = 0x0003,
            LineBit = 0x00000004,
            Triangles = 0x0004,
            TriangleStrip = 0x0005,
            TriangleFan = 0x0006,
            Quads = 0x0007,
            QuadStrip = 0x0008,
            PolygonBit = 0x00000008,
            Polygon = 0x0009,
            PolygonStippleBit = 0x00000010,
            PixelModeBit = 0x00000020,
            LightingBit = 0x00000040,
            FogBit = 0x00000080,
            DepthBufferBit = 0x00000100,
            Accum = 0x0100,
            Load = 0x0101,
            Return = 0x0102,
            Mult = 0x0103,
            Add = 0x0104,
            Never = 0x0200,
            AccumBufferBit = 0x00000200,
            Less = 0x0201,
            Equal = 0x0202,
            Lequal = 0x0203,
            Greater = 0x0204,
            Notequal = 0x0205,
            Gequal = 0x0206,
            Always = 0x0207,
            SrcColor = 0x0300,
            OneMinusSrcColor = 0x0301,
            SrcAlpha = 0x0302,
            OneMinusSrcAlpha = 0x0303,
            DstAlpha = 0x0304,
            OneMinusDstAlpha = 0x0305,
            DstColor = 0x0306,
            OneMinusDstColor = 0x0307,
            SrcAlphaSaturate = 0x0308,
            StencilBufferBit = 0x00000400,
            FrontLeft = 0x0400,
            FrontRight = 0x0401,
            BackLeft = 0x0402,
            BackRight = 0x0403,
            Front = 0x0404,
            Back = 0x0405,
            Left = 0x0406,
            Right = 0x0407,
            FrontAndBack = 0x0408,
            Aux0 = 0x0409,
            Aux1 = 0x040a,
            Aux2 = 0x040b,
            Aux3 = 0x040c,
            InvalidEnum = 0x0500,
            InvalidValue = 0x0501,
            InvalidOperation = 0x0502,
            StackOverflow = 0x0503,
            StackUnderflow = 0x0504,
            OutOfMemory = 0x0505,
            TwoD = 0x0600,
            ThreeD = 0x0601,
            ThreeDColor = 0x0602,
            ThreeDColorTexture = 0x0603,
            FourDColorTexture = 0x0604,
            PassThroughToken = 0x0700,
            PointToken = 0x0701,
            LineToken = 0x0702,
            PolygonToken = 0x0703,
            BitmapToken = 0x0704,
            DrawPixelToken = 0x0705,
            CopyPixelToken = 0x0706,
            LineResetToken = 0x0707,
            Exp = 0x0800,
            ViewportBit = 0x00000800,
            Exp2 = 0x0801,
            Cw = 0x0900,
            Ccw = 0x0901,
            Coeff = 0x0a00,
            Order = 0x0a01,
            Domain = 0x0a02,
            CurrentColor = 0x0b00,
            CurrentIndex = 0x0b01,
            CurrentNormal = 0x0b02,
            CurrentTextureCoords = 0x0b03,
            CurrentRasterColor = 0x0b04,
            CurrentRasterIndex = 0x0b05,
            CurrentRasterTextureCoords = 0x0b06,
            CurrentRasterPosition = 0x0b07,
            CurrentRasterPositionValid = 0x0b08,
            CurrentRasterDistance = 0x0b09,
            PointSmooth = 0x0b10,
            PointSize = 0x0b11,
            PointSizeRange = 0x0b12,
            PointSizeGranularity = 0x0b13,
            LineSmooth = 0x0b20,
            LineWidth = 0x0b21,
            LineWidthRange = 0x0b22,
            LineWidthGranularity = 0x0b23,
            LineStipple = 0x0b24,
            LineStipplePattern = 0x0b25,
            LineStippleRepeat = 0x0b26,
            ListMode = 0x0b30,
            MaxListNesting = 0x0b31,
            ListBase = 0x0b32,
            ListIndex = 0x0b33,
            PolygonMode = 0x0b40,
            PolygonSmooth = 0x0b41,
            PolygonStipple = 0x0b42,
            EdgeFlag = 0x0b43,
            CullFace = 0x0b44,
            CullFaceMode = 0x0b45,
            FrontFace = 0x0b46,
            Lighting = 0x0b50,
            LightModelLocalViewer = 0x0b51,
            LightModelTwoSide = 0x0b52,
            LightModelAmbient = 0x0b53,
            ShadeModel = 0x0b54,
            ColorMaterialFace = 0x0b55,
            ColorMaterialParameter = 0x0b56,
            ColorMaterial = 0x0b57,
            Fog = 0x0b60,
            FogIndex = 0x0b61,
            FogDensity = 0x0b62,
            FogStart = 0x0b63,
            FogEnd = 0x0b64,
            FogMode = 0x0b65,
            FogColor = 0x0b66,
            DepthRange = 0x0b70,
            DepthTest = 0x0b71,
            DepthWritemask = 0x0b72,
            DepthClearValue = 0x0b73,
            DepthFunc = 0x0b74,
            AccumClearValue = 0x0b80,
            StencilTest = 0x0b90,
            StencilClearValue = 0x0b91,
            StencilFunc = 0x0b92,
            StencilValueMask = 0x0b93,
            StencilFail = 0x0b94,
            StencilPassDepthFail = 0x0b95,
            StencilPassDepthPass = 0x0b96,
            StencilRef = 0x0b97,
            StencilWritemask = 0x0b98,
            MatrixMode = 0x0ba0,
            Normalize = 0x0ba1,
            Viewport = 0x0ba2,
            ModelviewStackDepth = 0x0ba3,
            ProjectionStackDepth = 0x0ba4,
            TextureStackDepth = 0x0ba5,
            ModelviewMatrix = 0x0ba6,
            ProjectionMatrix = 0x0ba7,
            TextureMatrix = 0x0ba8,
            AttribStackDepth = 0x0bb0,
            ClientAttribStackDepth = 0x0bb1,
            AlphaTest = 0x0bc0,
            AlphaTestFunc = 0x0bc1,
            AlphaTestRef = 0x0bc2,
            Dither = 0x0bd0,
            BlendDst = 0x0be0,
            BlendSrc = 0x0be1,
            Blend = 0x0be2,
            LogicOpMode = 0x0bf0,
            IndexLogicOp = 0x0bf1,
            ColorLogicOp = 0x0bf2,
            AuxBuffers = 0x0c00,
            DrawBuffer = 0x0c01,
            ReadBuffer = 0x0c02,
            ScissorBox = 0x0c10,
            ScissorTest = 0x0c11,
            IndexClearValue = 0x0c20,
            IndexWritemask = 0x0c21,
            ColorClearValue = 0x0c22,
            ColorWritemask = 0x0c23,
            IndexMode = 0x0c30,
            RgbaMode = 0x0c31,
            Doublebuffer = 0x0c32,
            Stereo = 0x0c33,
            RenderMode = 0x0c40,
            PerspectiveCorrectionHint = 0x0c50,
            PointSmoothHint = 0x0c51,
            LineSmoothHint = 0x0c52,
            PolygonSmoothHint = 0x0c53,
            FogHint = 0x0c54,
            TextureGenS = 0x0c60,
            TextureGenT = 0x0c61,
            TextureGenR = 0x0c62,
            TextureGenQ = 0x0c63,
            PixelMapIToI = 0x0c70,
            PixelMapSToS = 0x0c71,
            PixelMapIToR = 0x0c72,
            PixelMapIToG = 0x0c73,
            PixelMapIToB = 0x0c74,
            PixelMapIToA = 0x0c75,
            PixelMapRToR = 0x0c76,
            PixelMapGToG = 0x0c77,
            PixelMapBToB = 0x0c78,
            PixelMapAToA = 0x0c79,
            PixelMapIToISize = 0x0cb0,
            PixelMapSToSSize = 0x0cb1,
            PixelMapIToRSize = 0x0cb2,
            PixelMapIToGSize = 0x0cb3,
            PixelMapIToBSize = 0x0cb4,
            PixelMapIToASize = 0x0cb5,
            PixelMapRToRSize = 0x0cb6,
            PixelMapGToGSize = 0x0cb7,
            PixelMapBToBSize = 0x0cb8,
            PixelMapAToASize = 0x0cb9,
            UnpackSwapBytes = 0x0cf0,
            UnpackLsbFirst = 0x0cf1,
            UnpackRowLength = 0x0cf2,
            UnpackSkipRows = 0x0cf3,
            UnpackSkipPixels = 0x0cf4,
            UnpackAlignment = 0x0cf5,
            PackSwapBytes = 0x0d00,
            PackLsbFirst = 0x0d01,
            PackRowLength = 0x0d02,
            PackSkipRows = 0x0d03,
            PackSkipPixels = 0x0d04,
            PackAlignment = 0x0d05,
            MapColor = 0x0d10,
            MapStencil = 0x0d11,
            IndexShift = 0x0d12,
            IndexOffset = 0x0d13,
            RedScale = 0x0d14,
            RedBias = 0x0d15,
            ZoomX = 0x0d16,
            ZoomY = 0x0d17,
            GreenScale = 0x0d18,
            GreenBias = 0x0d19,
            BlueScale = 0x0d1a,
            BlueBias = 0x0d1b,
            AlphaScale = 0x0d1c,
            AlphaBias = 0x0d1d,
            DepthScale = 0x0d1e,
            DepthBias = 0x0d1f,
            MaxEvalOrder = 0x0d30,
            MaxLights = 0x0d31,
            MaxClipPlanes = 0x0d32,
            MaxTextureSize = 0x0d33,
            MaxPixelMapTable = 0x0d34,
            MaxAttribStackDepth = 0x0d35,
            MaxModelviewStackDepth = 0x0d36,
            MaxNameStackDepth = 0x0d37,
            MaxProjectionStackDepth = 0x0d38,
            MaxTextureStackDepth = 0x0d39,
            MaxViewportDims = 0x0d3a,
            MaxClientAttribStackDepth = 0x0d3b,
            SubpixelBits = 0x0d50,
            IndexBits = 0x0d51,
            RedBits = 0x0d52,
            GreenBits = 0x0d53,
            BlueBits = 0x0d54,
            AlphaBits = 0x0d55,
            DepthBits = 0x0d56,
            StencilBits = 0x0d57,
            AccumRedBits = 0x0d58,
            AccumGreenBits = 0x0d59,
            AccumBlueBits = 0x0d5a,
            AccumAlphaBits = 0x0d5b,
            NameStackDepth = 0x0d70,
            AutoNormal = 0x0d80,
            Map1Color4 = 0x0d90,
            Map1Index = 0x0d91,
            Map1Normal = 0x0d92,
            Map1TextureCoord1 = 0x0d93,
            Map1TextureCoord2 = 0x0d94,
            Map1TextureCoord3 = 0x0d95,
            Map1TextureCoord4 = 0x0d96,
            Map1Vertex3 = 0x0d97,
            Map1Vertex4 = 0x0d98,
            Map2Color4 = 0x0db0,
            Map2Index = 0x0db1,
            Map2Normal = 0x0db2,
            Map2TextureCoord1 = 0x0db3,
            Map2TextureCoord2 = 0x0db4,
            Map2TextureCoord3 = 0x0db5,
            Map2TextureCoord4 = 0x0db6,
            Map2Vertex3 = 0x0db7,
            Map2Vertex4 = 0x0db8,
            Map1GridDomain = 0x0dd0,
            Map1GridSegments = 0x0dd1,
            Map2GridDomain = 0x0dd2,
            Map2GridSegments = 0x0dd3,
            Texture1d = 0x0de0,
            Texture2d = 0x0de1,
            FeedbackBufferPointer = 0x0df0,
            FeedbackBufferSize = 0x0df1,
            FeedbackBufferType = 0x0df2,
            SelectionBufferPointer = 0x0df3,
            SelectionBufferSize = 0x0df4,
            TextureWidth = 0x1000,
            TransformBit = 0x00001000,
            TextureHeight = 0x1001,
            TextureInternalFormat = 0x1003,
            TextureBorderColor = 0x1004,
            TextureBorder = 0x1005,
            DontCare = 0x1100,
            Fastest = 0x1101,
            Nicest = 0x1102,
            Ambient = 0x1200,
            Diffuse = 0x1201,
            Specular = 0x1202,
            Position = 0x1203,
            SpotDirection = 0x1204,
            SpotExponent = 0x1205,
            SpotCutoff = 0x1206,
            ConstantAttenuation = 0x1207,
            LinearAttenuation = 0x1208,
            QuadraticAttenuation = 0x1209,
            Compile = 0x1300,
            CompileAndExecute = 0x1301,
            Byte = 0x1400,
            UnsignedByte = 0x1401,
            Short = 0x1402,
            UnsignedShort = 0x1403,
            Int = 0x1404,
            UnsignedInt = 0x1405,
            Float = 0x1406,
            TwoBytes = 0x1407,
            ThreeBytes = 0x1408,
            FourBytes = 0x1409,
            Double = 0x140a,
            Clear = 0x1500,
            And = 0x1501,
            AndReverse = 0x1502,
            Copy = 0x1503,
            AndInverted = 0x1504,
            Noop = 0x1505,
            Xor = 0x1506,
            Or = 0x1507,
            Nor = 0x1508,
            Equiv = 0x1509,
            Invert = 0x150a,
            OrReverse = 0x150b,
            CopyInverted = 0x150c,
            OrInverted = 0x150d,
            Nand = 0x150e,
            Set = 0x150f,
            Emission = 0x1600,
            Shininess = 0x1601,
            AmbientAndDiffuse = 0x1602,
            ColorIndexes = 0x1603,
            Modelview = 0x1700,
            Projection = 0x1701,
            Texture = 0x1702,
            Color = 0x1800,
            Depth = 0x1801,
            Stencil = 0x1802,
            ColorIndex = 0x1900,
            StencilIndex = 0x1901,
            DepthComponent = 0x1902,
            Red = 0x1903,
            Green = 0x1904,
            Blue = 0x1905,
            Alpha = 0x1906,
            Rgb = 0x1907,
            Rgba = 0x1908,
            Luminance = 0x1909,
            LuminanceAlpha = 0x190a,
            Bitmap = 0x1a00,
            Point = 0x1b00,
            Line = 0x1b01,
            Fill = 0x1b02,
            Render = 0x1c00,
            Feedback = 0x1c01,
            Select = 0x1c02,
            Flat = 0x1d00,
            Smooth = 0x1d01,
            Keep = 0x1e00,
            Replace = 0x1e01,
            Incr = 0x1e02,
            Decr = 0x1e03,
            Vendor = 0x1f00,
            Renderer = 0x1f01,
            Version = 0x1f02,
            Extensions = 0x1f03,
            S = 0x2000,
            EnableBit = 0x00002000,
            T = 0x2001,
            R = 0x2002,
            Q = 0x2003,
            Modulate = 0x2100,
            Decal = 0x2101,
            TextureEnvMode = 0x2200,
            TextureEnvColor = 0x2201,
            TextureEnv = 0x2300,
            EyeLinear = 0x2400,
            ObjectLinear = 0x2401,
            SphereMap = 0x2402,
            TextureGenMode = 0x2500,
            ObjectPlane = 0x2501,
            EyePlane = 0x2502,
            Nearest = 0x2600,
            Linear = 0x2601,
            NearestMipmapNearest = 0x2700,
            LinearMipmapNearest = 0x2701,
            NearestMipmapLinear = 0x2702,
            LinearMipmapLinear = 0x2703,
            TextureMagFilter = 0x2800,
            TextureMinFilter = 0x2801,
            TextureWrapS = 0x2802,
            TextureWrapT = 0x2803,
            Clamp = 0x2900,
            Repeat = 0x2901,
            PolygonOffsetUnits = 0x2a00,
            PolygonOffsetPoint = 0x2a01,
            PolygonOffsetLine = 0x2a02,
            R3G3B2 = 0x2a10,
            V2f = 0x2a20,
            V3f = 0x2a21,
            C4ubV2f = 0x2a22,
            C4ubV3f = 0x2a23,
            C3fV3f = 0x2a24,
            N3fV3f = 0x2a25,
            C4fN3fV3f = 0x2a26,
            T2fV3f = 0x2a27,
            T4fV4f = 0x2a28,
            T2fC4ubV3f = 0x2a29,
            T2fC3fV3f = 0x2a2a,
            T2fN3fV3f = 0x2a2b,
            T2fC4fN3fV3f = 0x2a2c,
            T4fC4fN3fV4f = 0x2a2d,
            ClipPlane0 = 0x3000,
            ClipPlane1 = 0x3001,
            ClipPlane2 = 0x3002,
            ClipPlane3 = 0x3003,
            ClipPlane4 = 0x3004,
            ClipPlane5 = 0x3005,
            Light0 = 0x4000,
            ColorBufferBit = 0x00004000,
            Light1 = 0x4001,
            Light2 = 0x4002,
            Light3 = 0x4003,
            Light4 = 0x4004,
            Light5 = 0x4005,
            Light6 = 0x4006,
            Light7 = 0x4007,
            HintBit = 0x00008000,
            PolygonOffsetFill = 0x8037,
            PolygonOffsetFactor = 0x8038,
            Alpha4 = 0x803b,
            Alpha8 = 0x803c,
            Alpha12 = 0x803d,
            Alpha16 = 0x803e,
            Luminance4 = 0x803f,
            Luminance8 = 0x8040,
            Luminance12 = 0x8041,
            Luminance16 = 0x8042,
            Luminance4Alpha4 = 0x8043,
            Luminance6Alpha2 = 0x8044,
            Luminance8Alpha8 = 0x8045,
            Luminance12Alpha4 = 0x8046,
            Luminance12Alpha12 = 0x8047,
            Luminance16Alpha16 = 0x8048,
            Intensity = 0x8049,
            Intensity4 = 0x804a,
            Intensity8 = 0x804b,
            Intensity12 = 0x804c,
            Intensity16 = 0x804d,
            Rgb4 = 0x804f,
            Rgb5 = 0x8050,
            Rgb8 = 0x8051,
            Rgb10 = 0x8052,
            Rgb12 = 0x8053,
            Rgb16 = 0x8054,
            Rgba2 = 0x8055,
            Rgba4 = 0x8056,
            Rgb5A1 = 0x8057,
            Rgba8 = 0x8058,
            Rgb10A2 = 0x8059,
            Rgba12 = 0x805a,
            Rgba16 = 0x805b,
            TextureRedSize = 0x805c,
            TextureGreenSize = 0x805d,
            TextureBlueSize = 0x805e,
            TextureAlphaSize = 0x805f,
            TextureLuminanceSize = 0x8060,
            TextureIntensitySize = 0x8061,
            ProxyTexture1d = 0x8063,
            ProxyTexture2d = 0x8064,
            TexturePriority = 0x8066,
            TextureResident = 0x8067,
            TextureBinding1d = 0x8068,
            TextureBinding2d = 0x8069,
            VertexArray = 0x8074,
            NormalArray = 0x8075,
            ColorArray = 0x8076,
            IndexArray = 0x8077,
            TextureCoordArray = 0x8078,
            EdgeFlagArray = 0x8079,
            VertexArraySize = 0x807a,
            VertexArrayType = 0x807b,
            VertexArrayStride = 0x807c,
            NormalArrayType = 0x807e,
            NormalArrayStride = 0x807f,
            ColorArraySize = 0x8081,
            ColorArrayType = 0x8082,
            ColorArrayStride = 0x8083,
            IndexArrayType = 0x8085,
            IndexArrayStride = 0x8086,
            TextureCoordArraySize = 0x8088,
            TextureCoordArrayType = 0x8089,
            TextureCoordArrayStride = 0x808a,
            EdgeFlagArrayStride = 0x808c,
            VertexArrayPointer = 0x808e,
            NormalArrayPointer = 0x808f,
            ColorArrayPointer = 0x8090,
            IndexArrayPointer = 0x8091,
            TextureCoordArrayPointer = 0x8092,
            EdgeFlagArrayPointer = 0x8093,
            ColorIndex1Ext = 0x80e2,
            ColorIndex2Ext = 0x80e3,
            ColorIndex4Ext = 0x80e4,
            ColorIndex8Ext = 0x80e5,
            ColorIndex12Ext = 0x80e6,
            ColorIndex16Ext = 0x80e7,
            EvalBit = 0x00010000,
            ListBit = 0x00020000,
            TextureBit = 0x00040000,
            ScissorBit = 0x00080000,
            AllAttribBits = 0x000fffff,
            ClientAllAttribBits = 0xffffffff
    };
// /////////////////////////////////// //
    struct {
        inline fn operator()(Enum en) { glClear((GLenum)en); };
        inline fn operator()(f32 r, f32 g, f32 b) { glClearColor(r,g,b,1); };
        inline fn Color(f32 r, f32 g, f32 b) { glClearColor(r, g, b, 1); };
        inline fn Index(f32 c) { glClearIndex(c); };
        inline fn Depth(f32 depth) { glClearDepth(depth); };
        inline fn Stencil(int s) { glClearStencil(s); };
        inline fn Accum(f32 r, f32 g, f32 b, f32 a = 1.f) { glClearAccum(r, g, b, a); };
    } Clear;
    struct {
        enum class DepthFunc : uint { Always, Never, Less, Equal, Lequal, Greater, Notequal, Gequal };
        using enum DepthFunc;
        inline fn operator()(bool enab) { enab ? glEnable(GL_DEPTH_FUNC) : glDisable(GL_DEPTH_FUNC); };
        inline fn operator()(DepthFunc func) { glDepthFunc((GLenum)func); };
        inline fn Func(DepthFunc func) { glDepthFunc((GLenum)func); };
        inline fn Mask(bool o) { glDepthMask(o ? 1 : 0); };
    } Depth;
    struct {

    } Blend;
    struct {
        inline fn operator()(Enum en) { glEnable(GLenum(en)); };
        inline fn ClientState(Enum en) { glEnableClientState((GLenum)en); };
        inline fn VertexAttribArray(uint pos) { glEnableVertexAttribArray(pos); };
        inline bool operator[](Enum en) { return glIsEnabled((GLenum)en); };
    } Enable;
    struct {
        inline fn operator()(Enum en) { glDisable(GLenum(en)); };
        inline fn ClientState(Enum en) { glDisableClientState((GLenum)en); };
        inline fn VertexAttribArray(uint pos) { glDisableVertexAttribArray(pos); };
    } Disable;
    inline fn Flush() { glFlush(); };
    inline fn Ident() { glLoadIdentity(); };
    inline fn ShadeModel(Enum en) { glShadeModel((GLenum)en); };
    inline fn VertexAttribPointer(uint index, int size, DataType type, bool normalized, uint stride, const ptr pointer) { glVertexAttribPointer(index, size, (GLenum)type, normalized, stride, pointer); };
    inline fn VertexPointer(int size, DataType type, uint stride, const ptr pointer) { glVertexPointer(size, (GLenum)type, stride, pointer); };
    inline fn TexCoordPointer(int size, DataType type, uint stride, const ptr pointer) { glTexCoordPointer(size, (GLenum)type, stride, pointer); };
    inline fn NormalPointer(DataType type, uint stride, const ptr pointer) { glNormalPointer((GLenum)type, stride, pointer); };
    inline fn DrawArrays(Poly poly, uint count, uint first = 0u) { glDrawArrays((GLenum)poly, first, count); };
    //template <_Vector3_t T> inline fn Draw(Poly poly, list<T> data, DrawMode mode = Vertex) { /*maybe later*/ };
    // inline fn Enable(Enum en) { glEnable(GLenum(en)); };
    // inline fn Disable(Enum en) { glDisable(GLenum(en)); };
    // inline fn EnableClientState(Enum en) { glEnableClientState((GLenum)en); };
    // inline fn EnableVertexAttribArray(uint pos) { glEnableVertexAttribArray(pos); };
    // inline fn DisableClientState(Enum en) { glDisableClientState((GLenum)en); };
    // inline fn DisableVertexAttribArray(uint pos) { glDisableVertexAttribArray(pos); };
} gl;
using glEnum = decltype(gl)::Enum;
using glPoly = decltype(gl)::Poly;
using glDataType = decltype(gl)::DataType;
using glTextureMode = decltype(gl)::TextureMode;
inline glEnum operator|(glEnum a, glEnum b) { return glEnum(unsigned(a) | unsigned(b)); }
// constexpr const auto& _gl_init = []() { glewInit(); return true; };